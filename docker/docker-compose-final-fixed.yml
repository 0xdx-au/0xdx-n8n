# 2025-07-20 CH41B01
# Production-Ready Security-Hardened N8N Deployment with Comprehensive Logging

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "50m"
    max-file: "3"
    tag: "{{.ImageName}}/{{.Name}}/{{.ID}}"
    labels: "service,environment,version"

x-common-labels: &common-labels
  - "traefik.enable=false"
  - "com.0xdx.project=n8n-secure"
  - "com.0xdx.environment=production"
  - "com.0xdx.maintainer=CH41B01"

services:
  # Centralized Logging with Fluent Bit
  logging:
    image: fluent/fluent-bit:latest
    container_name: n8n-logging-engine
    restart: unless-stopped
    volumes:
      - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./logging/parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logs:/var/log/n8n:rw
      - log-data:/var/log/fluent-bit:rw
    networks:
      - n8n-secure-network
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    labels: *common-labels

  # Caddy Reverse Proxy with Enhanced Logging
  caddy:
    image: caddy:2-alpine
    container_name: n8n-caddy-secure
    restart: unless-stopped
    ports:
      - "127.0.0.1:443:443"
      - "127.0.0.1:80:80"
    volumes:
      - ./security/Caddyfile-simple:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
      - ./logs/caddy:/var/log/caddy:rw
    networks:
      - n8n-secure-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    logging: *default-logging
    labels: 
      - <<: *common-labels
      - "com.0xdx.service=caddy-proxy"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N8N Application with Enhanced Configuration
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-app-secure
    restart: unless-stopped
    expose:
      - "5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_ENCRYPTION_KEY=N8nPr0duct10nK3yVeryL0ngAndS3cur3Ch4ng3Th1sInPr0duct10n2025
      - N8N_USER_FOLDER=/home/node/.n8n
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=file
      - N8N_LOG_FILE_LOCATION=/var/log/n8n/n8n.log
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin_6290
      - N8N_BASIC_AUTH_PASSWORD=SecureRandomP@ssw0rd2025!
      - N8N_DISABLE_UI=false
      - N8N_SECURE_COOKIE=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - WEBHOOK_URL=https://localhost
      - NODE_ENV=production
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_prod_7361
      - DB_POSTGRESDB_USER=n8n_user_5128
      - DB_POSTGRESDB_PASSWORD=Sup3rS3cur3DBP@ssw0rd2025!
      - DB_POSTGRESDB_CONNECTION_TIMEOUT=60000
      - DB_POSTGRESDB_POOL_SIZE=10
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - TZ=UTC
    volumes:
      - n8n-data:/home/node/.n8n
      - ./logs/n8n:/var/log/n8n:rw
    networks:
      - n8n-secure-network
    depends_on:
      postgres:
        condition: service_healthy
      caddy:
        condition: service_started
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "node"
    logging: *default-logging
    labels:
      - <<: *common-labels
      - "com.0xdx.service=n8n-app"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # PostgreSQL with Enhanced Logging
  postgres:
    image: postgres:16-alpine
    container_name: n8n-postgres-secure
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n_prod_7361
      - POSTGRES_USER=n8n_user_5128
      - POSTGRES_PASSWORD=Sup3rS3cur3DBP@ssw0rd2025!
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - POSTGRES_LOG_STATEMENT=all
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=1000
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql:rw
    networks:
      - n8n-secure-network
    expose:
      - "5432"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging: *default-logging
    labels:
      - <<: *common-labels
      - "com.0xdx.service=postgres-db"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_user_5128 -d n8n_prod_7361"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Grafana with Enhanced Logging
  grafana:
    image: grafana/grafana:latest
    container_name: n8n-grafana-secure
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=Gr@fanaS3cur3P@ss2025!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=https://localhost/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_LOG_LEVEL=info
      - GF_PATHS_LOGS=/var/log/grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./logs/grafana:/var/log/grafana:rw
    networks:
      - n8n-secure-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "472:472"
    logging: *default-logging
    labels:
      - <<: *common-labels
      - "com.0xdx.service=grafana-monitor"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation and Analysis
  elasticsearch:
    image: elasticsearch:8.11.3
    container_name: n8n-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - n8n-secure-network
    expose:
      - "9200"
    logging: *default-logging
    labels:
      - <<: *common-labels
      - "com.0xdx.service=elasticsearch"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  caddy-data:
    labels:
      - "com.0xdx.volume=caddy-data"
  caddy-config:
    labels:
      - "com.0xdx.volume=caddy-config"
  n8n-data:
    labels:
      - "com.0xdx.volume=n8n-data"
  postgres-data:
    labels:
      - "com.0xdx.volume=postgres-data"
  grafana-data:
    labels:
      - "com.0xdx.volume=grafana-data"
  log-data:
    labels:
      - "com.0xdx.volume=log-data"
  elastic-data:
    labels:
      - "com.0xdx.volume=elastic-data"

networks:
  n8n-secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
    labels:
      - "com.0xdx.network=n8n-secure"
